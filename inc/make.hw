## these need to be set before including

ifndef TOP
	$(error TOP is not set)
endif
ifndef HDL_SOURCE
	$(error HDL_SOURCE is not set)
endif
ifndef DEVICE
	$(error DEVICE is not set)
endif
ifndef CONSTRAINTS
	$(error CONSTRAINTS is not set)
endif

# common tcl scripts
SYNTH_TCL=$(SCRIPTS)/synth.tcl
IMPL_TCL=$(SCRIPTS)/impl.tcl
MEM_TCL=$(SCRIPTS)/mem.tcl
BITFILE_TCL=$(SCRIPTS)/bitfile.tcl
PROGRAM_TCL=$(SCRIPTS)/program.tcl

default: bitfile

BUILD_PATH=$(abspath build_$(GAME))
BUILD_ENV=$(BUILD_PATH)/.build
XDC_FILE=$(BUILD_PATH)/constraints.tcl
SRC_FILE=$(BUILD_PATH)/sources.tcl


$(BUILD_ENV): $(HDL_SOURCE) $(CONSTRAINTS)
	@mkdir -p $(BUILD_PATH);
	@rm -f $(XDC_FILE) $(SRC_FILE);
	@for s in $(abspath $(HDL_SOURCE)) ; do \
		echo "$$s" >> $(SRC_FILE); \
	done
	@for s in $(abspath $(CONSTRAINTS)) ; do \
		echo "$$s" >> $(XDC_FILE); \
	done
	@touch $(BUILD_ENV)

#synthesis
SYNTH_PATH=$(BUILD_PATH)/synth
SYNTH_ENV=$(SYNTH_PATH)/.synth
SYNTH=$(SYNTH_PATH)/$(TOP).dcp
SYNTH_ARGS_TCL=synth_args.tcl
CART_TCL=$(SYNTH_PATH)/cart.tcl

synth: $(SYNTH)

$(SYNTH_ENV): $(BUILD_ENV) $(SYNTH_TCL)
	@mkdir -p $(SYNTH_PATH);
	@cp $(SYNTH_TCL) $(SYNTH_PATH);
	-@cp $(SYNTH_ARGS_TCL) $(SYNTH_PATH);
	@echo "-verilog_define ROM_PATH=\"$(ROM_PATH)\"\n-verilog_define PALFILE=\"$(PALFILE)\"" >> $(SYNTH_PATH)/$(SYNTH_ARGS_TCL)
	@echo "-verilog_define CART=$(GAME)_cart" > $(CART_TCL)

	@touch $(SYNTH_ENV)

$(SYNTH): $(SYNTH_ENV)
	cd $(SYNTH_PATH) && \
	vivado -m64 -mode batch -notrace -source $(SYNTH_TCL) -tclargs $(TOP) $(DEVICE) $(BUILD_PATH) \
	|| $(call FAIL, SYNTHESIS, true)
	$(call SUCCEED, SYNTHESIS, false)

#place & route
IMPL_PATH=$(BUILD_PATH)/impl
IMPL_ENV=$(IMPL_PATH)/.impl
IMPL=$(IMPL_PATH)/$(TOP)_routed.dcp
IMPL_ARGS_TCL=impl_args.tcl

impl: $(IMPL)

$(IMPL_ENV): $(BUILD_ENV) $(IMPL_TCL) $(BITFILE_TCL) $(PROGRAM_TCL)
	@mkdir -p $(IMPL_PATH);
	@cp $(IMPL_TCL) $(IMPL_PATH);
	@cp $(BITFILE_TCL) $(IMPL_PATH);
	@cp $(PROGRAM_TCL) $(IMPL_PATH);
	-@cp $(IMPL_ARGS_TCL) $(IMPL_PATH);
	@touch $(IMPL_PATH)/$(IMPL_ARGS_TCL)
	@touch $(IMPL_ENV)

$(IMPL): $(IMPL_ENV) $(SYNTH)
	cd $(IMPL_PATH) && \
	vivado -m64 -mode batch -notrace -source $(IMPL_TCL) -tclargs $(TOP) $(DEVICE) $(SYNTH) $(BUILD_PATH) \
	|| $(call FAIL, IMPLEMENTATION, true)
	$(call SUCCEED, IMPLEMENTATION, true)

mem: $(IMPL_ENV) $(IMPL) 
	cd $(IMPL_PATH) && \
	vivado -m64 -mode batch -notrace -source $(MEM_TCL) -tclargs $(TOP) $(DEVICE) $(IMPL) $(BUILD_PATH) \
	|| $(call FAIL, WRITE_MEM, true)
	$(call SUCCEED, WRITE_MEM, true)


# bitfile
<<<<<<< HEAD
BITFILE=$(abspath bitfiles/$(GAME).bit)
=======
BITFILE_PATH=$(abspath bitfiles)
BITFILE=$(BITFILE_PATH)/$(GAME).bit
>>>>>>> dev
bitfile: $(BITFILE)

$(BITFILE_PATH):
	-@mkdir $(BITFILE_PATH)

$(BITFILE):	$(IMPL) $(BITFILE_PATH)
	cd $(IMPL_PATH) && \
	vivado -m64 -mode batch -notrace -log bitfile.log -source $(BITFILE_TCL) -tclargs $(TOP)
	cp $(IMPL_PATH)/$(TOP).bit $(BITFILE)

.PHONY: program
program: $(BITFILE) force_program

.PHONY: force_program
force_program:
	@echo "programming $(GAME) on device $(DEVICE_SHORT) with bitfile $(BITFILE)..."
	cd $(IMPL_PATH) && \
	vivado -m64 -mode batch -notrace -source $(PROGRAM_TCL) -tclargs $(BITFILE) $(DEVICE_SHORT)


.PHONY: clean
clean:
	rm -rf $(BUILD_PATH)
	rm $(BITFILE)
	
# keep intermediate files
.SECONDARY: